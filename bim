<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Jumping Ball Game</title>
    <style>
        body {
            margin: 0;
            overflow: hidden;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            background-color: #000;
            font-family: Arial, sans-serif;
        }
        canvas {
            background: linear-gradient(to bottom, #87ceeb, #87ceeb 50%, #007bff 100%);
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
            display: none;
        }
        #start-screen, #game-over-screen, #upgrade-screen, #code-screen, #skins-screen {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            display: flex;
            justify-content: center;
            align-items: center;
            background: linear-gradient(-45deg, #ee7752, #e73c7e, #23a6d5, #23d5ab);
            background-size: 400% 400%;
            animation: gradient 15s ease infinite;
            color: white;
            font-size: 24px;
            z-index: 10;
            flex-direction: column;
        }
        @keyframes gradient {
            0% {
                background-position: 0% 50%;
            }
            50% {
                background-position: 100% 50%;
            }
            100% {
                background-position: 0% 50%;
            }
        }
        #start-screen button, #game-over-screen button, #upgrade-screen button, #code-screen button, #skins-screen button {
            padding: 10px 20px;
            font-size: 24px;
            cursor: pointer;
            margin-top: 10px;
            background: linear-gradient(to right, #ff7e5f, #feb47b);
            border: none;
            color: white;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
            transition: transform 0.3s ease;
        }
        #start-screen button:hover, #game-over-screen button:hover, #upgrade-screen button:hover, #code-screen button:hover, #skins-screen button:hover {
            transform: scale(1.1);
        }
        #menu {
            position: absolute;
            top: 10px;
            right: 10px;
            display: flex;
            flex-direction: column;
            align-items: flex-end;
        }
        #menu button {
            padding: 10px;
            margin: 5px;
            font-size: 16px;
            cursor: pointer;
            background: linear-gradient(to right, #ff7e5f, #feb47b);
            border: none;
            color: #fff;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
            transition: transform 0.3s ease;
        }
        #menu button:hover {
            transform: scale(1.1);
        }
        #code-input {
            display: flex;
            flex-direction: column;
            align-items: center;
            margin-top: 20px;
        }
        #code-input input {
            padding: 10px;
            font-size: 20px;
            margin-bottom: 10px;
            border: none;
            border-radius: 5px;
            text-align: center;
        }
        #balance {
            display: flex;
            justify-content: center;
            align-items: center;
            gap: 20px;
            margin-top: 20px;
        }
        .balance-item {
            display: flex;
            flex-direction: column;
            align-items: center;
            padding: 10px 20px;
            background: rgba(255, 255, 255, 0.1);
            border-radius: 10px;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
        }
        .balance-item span {
            font-size: 36px;
            background: linear-gradient(to right, #ff7e5f, #feb47b);
            -webkit-background-clip: text;
            color: transparent;
            font-weight: bold;
        }
        .balance-item label {
            font-size: 14px;
            color: #ff7e5f;
        }
        #energy-container {
            margin-top: 20px;
            display: flex;
            flex-direction: column;
            align-items: center;
            background: rgba(0, 0, 0, 0.8);
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
        }
        #energy-container p {
            font-size: 18px;
            color: white;
        }
        #energy-timer {
            font-size: 16px;
            color: #ff7e5f;
        }
        #referral-link {
            display: flex;
            flex-direction: column;
            align-items: center;
            margin-top: 20px;
            padding: 20px;
            background: rgba(0, 0, 0, 0.8);
            border-radius: 10px;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
        }
        #referral-link label {
            font-size: 18px;
            color: #ff7e5f;
        }
        #referral-link p {
            font-size: 16px;
            color: #ffffff;
            word-wrap: break-word;
            text-align: center;
        }
        #task-container {
            margin-top: 20px;
            display: flex;
            flex-direction: column;
            align-items: center;
            background: rgba(0, 0, 0, 0.8);
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
        }
        #task-container p {
            font-size: 18px;
            color: white;
        }
        #task-container a {
            color: #ff7e5f;
            text-decoration: none;
            font-weight: bold;
        }
        #task-container button {
            padding: 10px 20px;
            font-size: 16px;
            margin-top: 10px;
            background: linear-gradient(to right, #ff7e5f, #feb47b);
            border: none;
            color: white;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
            cursor: pointer;
            transition: transform 0.3s ease;
        }
        #task-container button:hover {
            transform: scale(1.1);
        }
        #skins-screen {
            display: none;
            background-color: rgba(0, 0, 0, 0.9);
        }
        #skins-screen h1 {
            font-size: 50px;
            background: linear-gradient(to right, red, orange, yellow, green, blue, indigo, violet);
            -webkit-background-clip: text;
            color: transparent;
            animation: rainbow 5s infinite;
        }
        @keyframes rainbow {
            0% { background-position: 0% 50%; }
            50% { background-position: 100% 50%; }
            100% { background-position: 0% 50%; }
        }
    </style>
</head>
<body>
    <div id="start-screen">
        <h1>Jumping Ball Game</h1>
        <div id="balance">
            <div class="balance-item">
                <label>Balance</label>
                <span id="total-balance">0</span>
            </div>
            <div class="balance-item">
                <label>Super Energy</label>
                <span id="super-energy">0</span>
            </div>
        </div>
        <button id="start-game-btn">Start Game</button>
        <button id="upgrade-btn">Upgrades</button>
        <button id="code-btn">Code</button>
        <button id="skins-btn">Skins</button>
        <div id="energy-container">
            <p>Energy: <span id="energy">3</span> / <span id="max-energy">10</span></p>
            <p id="energy-timer"></p>
        </div>
        <div id="task-container">
            <p>Subscribe to our <a href="https://t.me/+HXwJS4dVGLE5Zjdi" target="_blank">Telegram channel</a> and get 1 Super Energy!</p>
            <button id="subscribe-btn">Subscribe</button>
        </div>
    </div>
    <div id="game-over-screen" style="display: none;">
        <h1>Game Over</h1>
        <button id="restart-game-btn">Restart</button>
        <button id="exit-main-menu-btn">Exit</button>
    </div>
    <div id="upgrade-screen" style="display: none;">
        <h1>Upgrades</h1>
        <button id="upgrade-max-energy-btn">Increase Max Energy (<span id="max-energy-cost">1</span> Super Energy)</button>
        <button id="upgrade-score-multiplier-btn">Increase Score Multiplier (<span id="score-multiplier-cost">75</span> Points)</button>
        <button id="exit-upgrade-btn">Exit</button>
    </div>
    <div id="code-screen" style="display: none;">
        <h1>Enter Secret Code</h1>
        <div id="code-input">
            <input type="text" id="secret-code" placeholder="Enter Secret Code">
            <button id="submit-code-btn">Submit Code</button>
        </div>
        <div id="referral-link">
            <label>Your Referral Link:</label>
            <p id="referral-link-text"></p>
        </div>
        <button id="exit-code-btn">Back</button>
    </div>
    <div id="skins-screen" style="display: none;">
        <h1>Soon...</h1>
        <button id="exit-skins-btn">Back</button>
    </div>
    <canvas id="gameCanvas" width="800" height="400"></canvas>
    <div id="menu" style="display: none;">
        <button id="pause-game-btn">Pause</button>
        <button id="exit-to-main-menu-btn">Main Menu</button>
    </div>

    <script src="game.js"></script>
</body>
</html>
const canvas = document.getElementById('gameCanvas');
const ctx = canvas.getContext('2d');
const startScreen = document.getElementById('start-screen');
const gameOverScreen = document.getElementById('game-over-screen');
const upgradeScreen = document.getElementById('upgrade-screen');
const codeScreen = document.getElementById('code-screen');
const skinsScreen = document.getElementById('skins-screen');
const menu = document.getElementById('menu');
const totalBalanceDisplay = document.getElementById('total-balance');
const superEnergyDisplay = document.getElementById('super-energy');
const energyDisplay = document.getElementById('energy');
const maxEnergyDisplay = document.getElementById('max-energy');
const energyTimerDisplay = document.getElementById('energy-timer');
const secretCodeInput = document.getElementById('secret-code');
const upgradeMaxEnergyButton = document.getElementById('upgrade-max-energy-btn');
const upgradeScoreMultiplierButton = document.getElementById('upgrade-score-multiplier-btn');
const referralLinkText = document.getElementById('referral-link-text');
const taskContainer = document.getElementById('task-container');
const taskButton = document.getElementById('subscribe-btn');

let ball = {
    x: 50,
    y: 370,
    radius: 20,
    color: 'red',
    vy: 0,
    jumpPower: -15,
    gravity: 0.8,
    isJumping: false
};

let particles = [];
let obstacles = [];
let clouds = [];
let frames = 0;
let score = 0;
let gameOver = false;
let isPaused = false;
let totalBalance = 0;
let superEnergy = 0;
let energy = 3;
let maxEnergy = 10;
let scoreMultiplier = 1;
let codeUsed = false;
let lastEnergyTime = Date.now();
let maxEnergyCost = 1;
let scoreMultiplierCost = 75;
let playerId = generatePlayerId();
let telegramTaskCompleted = false;

function loadProgress() {
    const savedProgress = JSON.parse(localStorage.getItem('jumpingBallProgress'));
    if (savedProgress) {
        totalBalance = savedProgress.totalBalance;
        superEnergy = savedProgress.superEnergy;
        energy = savedProgress.energy;
        maxEnergy = savedProgress.maxEnergy;
        scoreMultiplier = savedProgress.scoreMultiplier;
        maxEnergyCost = savedProgress.maxEnergyCost;
        scoreMultiplierCost = savedProgress.scoreMultiplierCost;
        lastEnergyTime = savedProgress.lastEnergyTime || Date.now();
        playerId = savedProgress.playerId || generatePlayerId();
        telegramTaskCompleted = savedProgress.telegramTaskCompleted || false;
        
        totalBalanceDisplay.textContent = totalBalance;
        superEnergyDisplay.textContent = superEnergy;
        energyDisplay.textContent = energy;
        maxEnergyDisplay.textContent = maxEnergy;
        referralLinkText.textContent = `${window.location.href.split('?')[0]}?ref=${playerId}`;
        document.getElementById('max-energy-cost').textContent = maxEnergyCost;
        document.getElementById('score-multiplier-cost').textContent = scoreMultiplierCost;
        
        if (telegramTaskCompleted) {
            taskContainer.innerHTML = '<p>You have already subscribed and received your reward!</p>';
        }
    } else {
        referralLinkText.textContent = `${window.location.href.split('?')[0]}?ref=${playerId}`;
    }
}

function saveProgress() {
    const progress = {
        totalBalance,
        superEnergy,
        energy,
        maxEnergy,
        scoreMultiplier,
        maxEnergyCost,
        scoreMultiplierCost,
        lastEnergyTime,
        playerId,
        telegramTaskCompleted
    };
    localStorage.setItem('jumpingBallProgress', JSON.stringify(progress));
}

function generatePlayerId() {
    return 'player-' + Math.random().toString(36).substr(2, 9);
}

function startGame() {
    if (energy > 0) {
        startScreen.style.display = 'none';
        canvas.style.display = 'block';
        menu.style.display = 'block';
        energy--;
        energyDisplay.textContent = energy;
        gameOver = false;
        score = 0;
        obstacles = [];
        clouds = [];
        particles = [];
        ball.y = 370;
        ball.vy = 0;
        ball.isJumping = false;
        createClouds();
        gameLoop();
    } else {
        alert('Not enough energy to start a new game.');
    }
}

function restartGame() {
    gameOverScreen.style.display = 'none';
    startGame();
}

function pauseGame() {
    isPaused = !isPaused;
    if (!isPaused) {
        gameLoop();
    }
}

function exitToMainMenu() {
    saveProgress();
    startScreen.style.display = 'flex';
    canvas.style.display = 'none';
    menu.style.display = 'none';
    gameOverScreen.style.display = 'none';
    upgradeScreen.style.display = 'none';
    codeScreen.style.display = 'none';
    skinsScreen.style.display = 'none';
}

function showCodeMenu() {
    codeScreen.style.display = 'flex';
    upgradeScreen.style.display = 'none';
    startScreen.style.display = 'none';
}

function exitCodeMenu() {
    codeScreen.style.display = 'none';
    startScreen.style.display = 'flex';
}

function showSkinsMenu() {
    skinsScreen.style.display = 'flex';
    startScreen.style.display = 'none';
}

function exitSkinsMenu() {
    skinsScreen.style.display = 'none';
    startScreen.style.display = 'flex';
}

function submitCode() {
    const code = secretCodeInput.value.trim();
    if (code === 'CRYPTO' && !codeUsed) {
        totalBalance += 2000;
        totalBalanceDisplay.textContent = totalBalance;
        codeUsed = true;
        alert('Code accepted! You received 2000 points.');
    } else if (code === '05092004V') {
        energy = Math.min(maxEnergy, energy + 10);
        energyDisplay.textContent = energy;
        alert('Code accepted! You received 10 energy.');
    } else if (codeUsed) {
        alert('Code has already been used.');
    } else {
        alert('Invalid code.');
    }
    secretCodeInput.value = '';
    saveProgress();
}

function createObstacle() {
    const type = Math.random();
    let obstacle = {};
    if (type < 0.4) {
        obstacle = {
            x: canvas.width,
            y: 350,
            width: 20,
            height: Math.round(50 + Math.random() * 100),
            color: 'green',
            type: 'ground'
        };
    } else if (type < 0.6) {
        obstacle = {
            x: canvas.width,
            y: 350,
            width: 50,
            height: 50,
            color: 'blue',
            type: 'ground'
        };
    } else if (type < 0.8) {
        obstacle = {
            x: canvas.width,
            y: 300,
            width: 20,
            height: 50,
            color: 'orange',
            type: 'air'
        };
    } else {
        obstacle = {
            x: canvas.width,
            y: 370,
            width: 20,
            height: 30,
            color: 'green',
            type: 'bush'
        };
    }
    obstacles.push(obstacle);
}

function createClouds() {
    for (let i = 0; i < 5; i++) {
        const cloud = {
            x: Math.random() * canvas.width,
            y: Math.random() * 200,
            width: Math.round(60 + Math.random() * 40),
            height: Math.round(20 + Math.random() * 20),
            speed: 1 + Math.random()
        };
        clouds.push(cloud);
    }
}

function createParticle(x, y) {
    const particle = {
        x: x,
        y: y,
        radius: Math.round(Math.random() * 3 + 1),
        color: `rgba(255, ${Math.floor(Math.random() * 100)}, 0, ${Math.random()})`,
        vx: (Math.random() - 0.5) * 2,
        vy: (Math.random() - 0.5) * 2,
        life: Math.round(Math.random() * 30 + 20)
    };
    particles.push(particle);
}

function drawClouds() {
    clouds.forEach(cloud => {
        ctx.fillStyle = 'white';
        ctx.beginPath();
        ctx.arc(cloud.x, cloud.y, cloud.width / 2, 0, Math.PI * 2);
        ctx.arc(cloud.x + cloud.width / 2, cloud.y, cloud.height / 2, 0, Math.PI * 2);
        ctx.arc(cloud.x + cloud.width, cloud.y, cloud.width / 2, 0, Math.PI * 2);
        ctx.fill();
        ctx.closePath();
    });
}

function drawSun() {
    const centerX = 750;
    const centerY = 50;
    const radius = 30;
    const rays = 12;
    const rayLength = 20;

    ctx.beginPath();
    ctx.arc(centerX, centerY, radius, 0, Math.PI * 2);
    ctx.fillStyle = 'yellow';
    ctx.fill();
    ctx.closePath();

    for (let i = 0; i < rays; i++) {
        const angle = (i * Math.PI * 2) / rays;
        const startX = centerX + Math.cos(angle) * radius;
        const startY = centerY + Math.sin(angle) * radius;
        const endX = centerX + Math.cos(angle) * (radius + rayLength);
        const endY = centerY + Math.sin(angle) * (radius + rayLength);

        ctx.beginPath();
        ctx.moveTo(startX, startY);
        ctx.lineTo(endX, endY);
        ctx.strokeStyle = 'yellow';
        ctx.lineWidth = 2;
        ctx.stroke();
        ctx.closePath();
    }
}

function moveClouds() {
    clouds.forEach(cloud => {
        cloud.x += cloud.speed;
        if (cloud.x > canvas.width) {
            cloud.x = -cloud.width;
        }
    });
}

function drawParticles() {
    particles.forEach((particle, index) => {
        ctx.beginPath();
        ctx.arc(particle.x, particle.y, particle.radius, 0, Math.PI * 2);
        ctx.fillStyle = particle.color;
        ctx.fill();
        ctx.closePath();

        particle.x += particle.vx;
        particle.y += particle.vy;
        particle.life--;

        if (particle.life <= 0) {
            particles.splice(index, 1);
        }
    });
}

function drawBall() {
    ctx.beginPath();
    ctx.arc(ball.x, ball.y, ball.radius, 0, Math.PI * 2);
    ctx.fillStyle = ball.color;
    ctx.shadowColor = 'rgba(0, 0, 0, 0.5)';
    ctx.shadowBlur = 10;
    ctx.fill();
    ctx.closePath();
}

function drawObstacles() {
    obstacles.forEach(obstacle => {
        ctx.fillStyle = obstacle.color;
        ctx.fillRect(obstacle.x, obstacle.y, obstacle.width, obstacle.height);
        if (obstacle.type === 'bush') {
            ctx.beginPath();
            ctx.arc(obstacle.x + obstacle.width / 2, obstacle.y, obstacle.width / 2, 0, Math.PI * 2);
            ctx.fillStyle = obstacle.color;
            ctx.fill();
            ctx.closePath();
        }
    });
}

function moveObstacles() {
    obstacles.forEach(obstacle => {
        obstacle.x -= 5;
    });
    obstacles = obstacles.filter(obstacle => obstacle.x + obstacle.width > 0);
}

function detectCollision() {
    obstacles.forEach(obstacle => {
        if (
            ball.x + ball.radius > obstacle.x &&
            ball.x - ball.radius < obstacle.x + obstacle.width &&
            ball.y + ball.radius > obstacle.y &&
            ball.y - ball.radius < obstacle.y + obstacle.height
        ) {
            gameOver = true;
        }
    });
}

function updateBall() {
    if (ball.isJumping) {
        ball.vy += ball.gravity;
        ball.y += ball.vy;
        if (ball.y >= 370) {
            ball.y = 370;
            ball.isJumping = false;
            ball.vy = 0;
        }
    }
    createParticle(ball.x, ball.y);
}

function jump() {
    if (!ball.isJumping) {
        ball.vy = ball.jumpPower;
        ball.isJumping = true;
    }
}

function drawScore() {
    ctx.font = '24px Arial';
    ctx.fillStyle = 'white';
    ctx.fillText(`Score: ${score}`, 10, 30);
}

function gameLoop() {
    if (gameOver) {
        totalBalance += score;
        superEnergy += Math.floor(score / 100);
        gameOverScreen.style.display = 'flex';
        canvas.style.display = 'none';
        menu.style.display = 'none';
        saveProgress();
        return;
    }

    if (!isPaused) {
        ctx.clearRect(0, 0, canvas.width, canvas.height);

        frames++;
        if (frames % 100 === 0) {
            createObstacle();
        }

        drawSun();
        drawClouds();
        moveClouds();
        drawParticles();
        drawBall();
        drawObstacles();
        moveObstacles();
        detectCollision();
        updateBall();
        drawScore();

        obstacles.forEach(obstacle => {
            if (obstacle.x + obstacle.width < ball.x - ball.radius && !obstacle.scored) {
                if (obstacle.type === 'ground' || obstacle.type === 'bush') {
                    score += 1 * scoreMultiplier;
                } else if (obstacle.type === 'air') {
                    score += 2 * scoreMultiplier;
                }
                obstacle.scored = true;
            }
        });

        requestAnimationFrame(gameLoop);
    }
}

function showUpgradeMenu() {
    startScreen.style.display = 'none';
    upgradeScreen.style.display = 'flex';
}

function exitUpgradeMenu() {
    saveProgress();
    upgradeScreen.style.display = 'none';
    startScreen.style.display = 'flex';
}

function upgradeMaxEnergy() {
    if (superEnergy >= maxEnergyCost) {
        maxEnergy += 1;
        superEnergy -= maxEnergyCost;
        maxEnergyCost += 1;
        energyDisplay.textContent = energy;
        maxEnergyDisplay.textContent = maxEnergy;
        superEnergyDisplay.textContent = superEnergy;
        document.getElementById('max-energy-cost').textContent = maxEnergyCost;
        alert('Max energy increased!');
        saveProgress();
    } else {
        alert('Not enough super energy!');
    }
}

function upgradeScoreMultiplier() {
    if (totalBalance >= scoreMultiplierCost) {
        scoreMultiplier += 1;  // Теперь множитель увеличивается на целое число
        totalBalance -= scoreMultiplierCost;
        scoreMultiplierCost = Math.round(scoreMultiplierCost * 5.3);
        totalBalanceDisplay.textContent = totalBalance;
        document.getElementById('score-multiplier-cost').textContent = scoreMultiplierCost;
        alert('Score multiplier increased!');
        saveProgress();
    } else {
        alert('Not enough points!');
    }
}

function restoreEnergy() {
    if (energy < maxEnergy) {
        energy++;
        energyDisplay.textContent = energy;
        saveProgress();
    }
}

function updateEnergyTimer() {
    const now = Date.now();
    const timePassed = now - lastEnergyTime;
    const timeLeft = 1800000 - timePassed;

    if (timeLeft <= 0) {
        restoreEnergy();
        lastEnergyTime = now;
        energyTimerDisplay.textContent = '';
    } else {
        const minutes = Math.floor(timeLeft / 60000);
        const seconds = Math.floor((timeLeft % 60000) / 1000);
        energyTimerDisplay.textContent = `Next energy in: ${minutes}:${seconds < 10 ? '0' : ''}${seconds}`;
    }
}

function completeTelegramTask() {
    if (!telegramTaskCompleted) {
        superEnergy += 1;
        superEnergyDisplay.textContent = superEnergy;
        taskContainer.innerHTML = '<p>You have already subscribed and received your reward!</p>';
        telegramTaskCompleted = true;
        saveProgress();
        alert('Thank you for subscribing! You received 1 Super Energy.');
    } else {
        alert('You have already completed this task.');
    }
}

setInterval(updateEnergyTimer, 1000);

document.addEventListener('keydown', event => {
    if (event.code === 'Space') {
        jump();
    }
});

window.onload = function() {
    loadProgress();
    const urlParams = new URLSearchParams(window.location.search);
    const ref = urlParams.get('ref');
    if (ref && ref !== playerId) {
        totalBalance += 500;
        saveProgress();
        alert('You received 500 points for using a referral link!');
    }
};

document.getElementById('start-game-btn').addEventListener('click', startGame);
document.getElementById('upgrade-btn').addEventListener('click', showUpgradeMenu);
document.getElementById('code-btn').addEventListener('click', showCodeMenu);
document.getElementById('skins-btn').addEventListener('click', showSkinsMenu);
document.getElementById('pause-game-btn').addEventListener('click', pauseGame);
document.getElementById('exit-to-main-menu-btn').addEventListener('click', exitToMainMenu);
document.getElementById('restart-game-btn').addEventListener('click', restartGame);
document.getElementById('exit-main-menu-btn').addEventListener('click', exitToMainMenu);
document.getElementById('exit-upgrade-btn').addEventListener('click', exitUpgradeMenu);
document.getElementById('submit-code-btn').addEventListener('click', submitCode);
document.getElementById('exit-code-btn').addEventListener('click', exitCodeMenu);
document.getElementById('exit-skins-btn').addEventListener('click', exitSkinsMenu);
document.getElementById('upgrade-max-energy-btn').addEventListener('click', upgradeMaxEnergy);
document.getElementById('upgrade-score-multiplier-btn').addEventListener('click', upgradeScoreMultiplier);
document.getElementById('subscribe-btn').addEventListener('click', completeTelegramTask);
cd jumping-ball-game
git add .
git commit -m "Initial commit"
git push origin main
